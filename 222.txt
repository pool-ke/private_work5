目录
一.	工作内容	2
1.	手机LOGO异常检测	2
1.1	数据说明	2
1.2	数据制作	2
1.3	算法分析	2
2.	打光参数优化算法	5
2.1	目标函数	5
2.2	优化算法	6
2.3	Pyinstaller打包说明	8
二.	代码说明	8
1.	手机LOGO异常检测代码说明	8
2.	打光优化算法代码说明	11
三.	实验结果与分析	13
1.	手机LOGO异常检测实验分析	13
1.1	显示结果	13
1.2	统计结果	14
2.	打光优化结果	17
四.	其他说明	18
一.	工作内容
1.	手机LOGO异常检测

1.1	数据说明

手机LOGO异常检测主要检测手机LOGO中的多印或少印，并且定位出具体缺陷在手机中的位置。手机LOGO图像中负样本占绝大部分（无缺陷图为负样本，有缺陷图为正样本），难以采用有监督的深度学习方法进行有效处理。针对无监督的深度学习处理方法，主要有自编码器、生成对抗网络与受限玻尔兹曼机等。从训练数据数量、模型应用广度以及实现的简单性出发，选用自编码器模型进行数据处理。

1.2	数据制作

为实现有效的模型训练与测试，针对手机LOGO图像需要事先提取ROI（感兴趣区域，也就是待检测区域）和制作测试正样本。提取的ROI数据主要用于进行模型训练，部分样本与制作出来的正样本一起用来进行测试，验证模型的准确性。

                                         
                                                 待检测原图                                                ROI图像                            制作缺陷图

1.3	算法分析
该项目主要采用深度卷积自编码器，针对ROI图像进行训练，建立起对ROI图像的正向特征描述以及逆向图像生成，用于对缺陷图像进行异常检测与定位，其中采用图像边缘检测与开闭运行对图像进行精细化处理，提高检测精度。    
卷积自编码器是一种编码解码深度学习机制，主要是通过对同一类样本（负样本）进行编码解码以提取自身的特征，类似于建立自身的非线性曲线拟合或建立自身的空间结构基底，与PCA相似。模型训练完成后，新进来的样本会往非线性曲线或空间基底上投影，提取出与训练样本类似的特征信息。也就是说，即便进来的是正样本（有缺陷的LOGO图像），也是从其中提取与负样本相似的特征，故在模型测试时无论是输入正样本还是负样本，在连接层中提取到的特征都是负样本或接近负样本（ROI图像）的特征，因此最后重建出来的图像也是（或类似）负样本。原始的自编码网络结构如下


自编码网络



编码解码网络结构

自编码器主要对数据进行无监督编码，编码解码过程说明自编码器的训练形式，编码解码网络结构是编码解码过程的具体实现形式。
项目中采用的深度卷积自编码网络机构如下



图中Conv为深度卷积自编码网络的卷积层，Pool为池化层，Connect为全连接层。卷积层主要用于提取图像特征，池化层能够对输入的特征图进行压缩，一方面使特征图变小，简化网络计算复杂度，另一方面进行特征压缩，提取主要特征，全连接层主要是进行特征的融合，形成图像特征表示。
        视觉领域许多算法都要求先对图像进行二值化（图像像素取值0或1）。为实现有效的异常检测，需要对重建后的图像进行二值化处理，这种二值化操作阈值的选择非常重要。阈值选取的不适合可能得到的结果就毫无用处。自动选取阈值方法对于图像处理具有重要意义。项目代码中采用的阈值分割方法是Otsu方法。该方法假设一副图像由前景和背景组成，通过统计学的方法来选取一个阈值，使得阈值可以将前景和背景色尽可能的分开。或者说是在某种判据下最优。Otsu算法中的判据就是最大类间方差。效果例图如下所示：
                               
原图                                           二值化图

进行二值化处理后需要采用形态学开闭运算对图像的边缘进行精细化处理，提高检测准确精度。形态学处理主要包括，腐蚀、膨胀、开运算以及闭运算。腐蚀：一种消除边界点，使边界向内部收缩的过程。可以用来消除小而且无意义的物体。膨胀：将与物体接触的所有背景点合并到该物体中，使边界向外部扩张的过程。可以用来填补物体中的空洞。开运算：先腐蚀后膨胀的过程称为开运算。用来消除小物体、在纤细点处分离物体、平滑较大物体的边界的同时并不明显改变其面积。闭运算：先膨胀后腐蚀的过程称为闭运算。用来填充物体内细小的空洞、连接临近物体、平滑其边界的同时并不明显改变其面积。如下为开运算处理结果示意图


                           原图                                                           开运算结果图

如图可以看出，针对二值化处理的结果进行开运算处理，能够提升图像表示的精度，更好地刻画图像细节。

2.	打光参数优化算法

由于打光系统参数的不确定性影响，使得直接通过图像数据采集系统获取到的图像质量无法保证，后续难以实现有效的缺陷检测等任务。采用自动打光参数优化算法，获取同一产品的最优打光参数，对于保证后续的图像数据处理任务的顺利进行具有重要意义。
2.1	目标函数

为保证打光参数优化算法的顺利进行，需要定义合适的优化目标函数，以确定优化的衡量指标。图像清晰度，是指影像上各细部纹理及其边界的清晰程度。图像的清晰度是衡量图像质量优劣的重要指标，它能够较好的与人的主观感受相对应，图像的清晰度不高表现出图像的模糊。影响图像质量的主要原因包括：对焦、相机抖动、光线不强等原因。对焦问题：工作相机会自动对焦相机抖动问题：工作相机固定在工作台上。光源问题: 影响因素-光源亮度、光谱功率分布、光的强度、入射角度、均匀度、偏振方向等。
影响图像清晰度评价指标：
Vollath函数-统计图像横向依次相邻像素乘积的和与图像总体像素平均值的差值。主要是为了突出图像的梯度细节。
基于统计特征的熵函数-衡量图像信息丰富程度的一个重要指标，有信息论可知，一幅图像的信息量是由该图像的信息熵来度量，根据Shannon信息论，熵最大时信息量最多。
Reblur 二次模糊-如果一幅图像已经模糊了，那么再对它进行一次模糊处理，高频分量变化不大；但如果原图是清楚的，对它进行一次模糊处理，则高频分量变化会非常大。因此可以通过对待评测图像进行一次高斯模糊处理，得到该图像的退化图像，然后再比较原图像和退化图像相邻像素值的变化情况，根据变化的大小确定清晰度值的高低，计算结果越小表明图像越清晰，反之越模糊。
Brenner 梯度函数：
Brenner梯度函数是最简单的梯度评价函数，它通过计算相邻两个像素灰度差的平方来表示图像清晰度。
Tenengrad 梯度函数：
Tenengrad 梯度函数采用Sobel算子分别提取水平和垂直方向的梯度值，然后统计梯度之和来表示图像清晰度。
Laplacian 梯度函数：
Laplacian 梯度函数与Tenengrad梯度函数基本一致，用Laplacian算子替代Sobel算子。
SMD（灰度方差）函数 ：
当完全聚焦时，图像最清晰，图像中的高频分量也最多，故可将灰度变化作为聚焦评价的依据，即对每个像素邻域两个灰度相减后再逐个累加。
方差函数 ：
因为清晰的图像有着比模糊图像更大的灰度差异， 故可以采用方差函数作为评估指标。
能量梯度函数： 
能量梯度函数更适合实时评价图像清晰度，即每个像素邻域两个灰度值相减平方后再逐个累加对每一个像素邻域两个灰度相乘后再逐个像素累加。
          项目中采用的目标函数为先对图像梯度，然后求梯度均值，最后1除以梯度均值。该优化目标函数主要是考察图像梯度的平均信息，以衡量图像的清晰程度。

2.2	优化算法

由于光源的参数难以与图像的清晰度评价建立直接的函数关系，项目的打光参数优化算法主要采用粒子群优化算法，避免了构建光源参数与优化目标函数之间的函数关系的难题。优化算法流程图如下：

优化算法流程图

首先初始化粒子群初始粒子，并根据初始化粒子进行拍照，同时计算相应目标函数值；根据目标函数取值的大小排序，更新粒子；保存局部最优目标函数值所对应的打光参数值，并更新全局最优值；判断是否满足停止条件，不满足则返回根据更新的参数重新拍照，否则输出最优参数。结合打光设备的优化处理过程如下：（1）以设备复位点为起点，左右等间距偏置，共采集10个随机数据点为粒子群优化的起始值，每个数据点为三个维度（角度、纵向高度、横向距离）。（2）根据参数移动设备并拍摄照片，同时计算每个照片的清晰度目标函数值。（3）根据目标函数值的大小，依据粒子群更新算法，更新粒子。（4）保存更新过程中的局部最优值，同时更新全局最优粒子。（5）判断是否满足迭代停止条件（迭代次数大于15或连续三次目标函数变化值小于给定阈值），如果满足条件，输出最优粒子值，否则根据更新后的粒子重新拍照，进入下一轮的迭代。每次迭代更新一次每个粒子的值，并保存每个粒子更新路径中的最优值和总体的最优值，以保证总体往最优方向进行优化。

2.3	Pyinstaller打包说明

Python脚本在没有安装python的机器上不能运行，所以将脚本打包成exe文件，降低脚本对环境的依赖性同时运行更加迅速。Python脚本的打包工具有：Py2exe、PyInstaller以及cx_freeze等。在这里我们使用PyInstaller，主要原因是其安装方便，参考资料较多，且打包操作简单。打包处理流程如下：
（1）	Pyinstaller安装
下载安装包，在终端进入目录，运行
Python setup.py install 安转Pyinstaller。
（2）	产生依赖文件包
进入打光参数程序所在目录，运行Pyinstaller **.py 产生附属文件，找到pyQt/Qt下面的附属文件platform，复制到dist所在文件夹内，该文件夹为打包exe文件中Qt运行所必须的附加文件夹。
（3）	打包exe工程文件
进入打光参数程序所在目录，运行Pyinstaller **.py，在dist文件夹中产生.exe文件。
注意事项：版本兼容性分析：本次打包主要采用Pyinstaller，python程序是基于Python3.6，存在部分不兼容问题。主要是Pyinstaller打包Qt文件时所需要的platforms文件在系统的PyQt5文件夹下不存在，需要通过其他方法获取。本次打包采用Pyinstaller **.py形式产生相应依赖文件包。


二.	代码说明
1.	手机LOGO异常检测代码说明

异常检测代码主要分四部分，包括网络结构定义、网络训练、网络测试与后处理，如下图所示

网络结构定义

网络训练与网络测试


结果后处理

网络结构定义主要用于定义网络的结构模型，采用的形式为卷积-池化-卷积-池化-全连接-反池化-反卷积。网络训练主要是导入训练ROI图像进行网络训练，调整网络参数。网络的数据输入形式较多，包括地址列表、cvs数据、TFrecorder等。在总结报告中，所有涉及到深度学习模型的项目中，都采用TFrecorder作为训练和测试样本数据导入格式，其生产代码如下：

TFrecorder数据制作代码

测试代码主要是通过训练完成的模型重建测试样本，产生缺陷的粗糙定位。然后通过后处理的滤波、二值化与开运算产生缺陷的精确定位。

2.	打光优化算法代码说明

在打光优化算法代码中，主要说明优化过程，不涉及到打光设备的控制模块。算法流程已在打光参数优化算流程图中说明，代码主要包含两部分，第一部分为粒子群粒子初始化和迭代更新部分。代码如下：

粒子群粒子初始化

粒子群初始化部分主要是随机生成初始化粒子，并将初始化粒子作为打光设备的初始化参数进行图像数据采集，然后计算在不同参数下的优化目标函数值，用于初始化局部最后粒子与全局最优粒子。代码中主要先对三个ROI区域进行分别计算图像清晰度，然后通过累计最后形成一个目标函数进行统一表达。

粒子迭代更新
粒子更新部分主要是将更新的粒子作为打光参数优化设备的设备参数去重新采集图像进行计算，直到满足迭代停止条件。

三.	实验结果与分析
1.	手机LOGO异常检测实验分析
异常检测结果主要分两分，显示结果与统计结果。显示结果为在图中标记缺陷位置；统计结果为统计模型的检测准确性。
1.1	显示结果

带花纹LOGO异常检测


异常检测与定位
带花纹的手机LOGO异常检测中，第一行为原图，第二行为检测结果，结果显示LOGO中的缺陷（圆点）能够完全被检测出来；异常检测与定位结果中左边图为原图，蓝色部分为异常检测结果在原图中标定的位置，中间图为左边原图通过网络生成的图像，右图为检测出来的缺陷。
1.2	统计结果
使用交叉验证的思想分割数据集来对算法的准确性进行验证。共有7个数据集（MHA_HUAWEI，MHA_Model，YAOSHI-HUABAN，Zuandiaolan_HUAWEI_50，Zuandiaolan_HUAWEI，SUM，HUAWEI），每次选用一个数据集。采用5折交叉验证，总的无缺陷样本100个，有缺陷测试样本20个，每次选20个作为无缺陷测试样本，剩余80个作为训练样本。




上面分别为7个不同ROI数据集的异常检测交叉检验结果统计图。其中交叉1-5为5中交叉验证，Mean为验证结果均值，precise为准确率，Recall为召回率。结果显示，召回率为95%-100%之间，说明算法有效可行。
2.	打光优化结果

打光优化实验结果如下：
 
样品一

 
样品二

 
样品三


上图为打光参数优化实验结果图，其中每个样品的左部分图像为基于初始化粒子作为仪器参数采集的图像中感兴趣的三个区域，右边部分为经过优化后的最优图像对应的三个感兴趣区域图像。实验结果表明优化后的实验结果比初始结果具有更高的清晰度，优化算法是有效的。

四.	其他说明
1.	端口：
代码打包存放端口：10.87.129.250       
路径：\\10.87.129.250\大数据分析与人工智能\大数据与AI-图像\tmp
代码编写端口：10.87.59.66：60004
路径：/home/Huawei/myfile/code_python/Feng
2.	所有代码都已交付华为接口人，代码所在位置如下图



General_CAE_model.py 为手机LOGO异常检测代码
打光参数优化exe可执行文件及说明.rar 为打光参数优化打包结果，其中包含可执行文件、源码、算法说明文档以及界面操作文档。




